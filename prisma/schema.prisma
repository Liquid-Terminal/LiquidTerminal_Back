generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int         @id @default(autoincrement())
  privyUserId String      @unique
  name        String?     @db.VarChar(255)
  email       String?     @unique @db.VarChar(255)
  createdAt   DateTime    @default(now()) @db.Timestamp(6)
  verified    Boolean     @default(false)
  UserWallets UserWallet[]
  Watchlists  Watchlist[]
}

model Wallet {
  id          Int         @id @default(autoincrement())
  address     String      @unique @db.VarChar(255)
  name        String?     @db.VarChar(255)
  addedAt     DateTime    @default(now()) @db.Timestamp(6)
  UserWallets UserWallet[]
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique @db.VarChar(100)
  description String?   @db.VarChar(255)
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  updatedAt   DateTime  @updatedAt
  projects    Project[]
}

model Project {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now()) @db.Timestamp(6)
  updatedAt  DateTime  @updatedAt
  title      String    @unique @db.VarChar(255)
  desc       String    @db.VarChar(255)
  logo       String    @db.VarChar(255)
  twitter    String?   @db.VarChar(255)
  discord    String?   @db.VarChar(255)
  telegram   String?   @db.VarChar(255)
  website    String?   @db.VarChar(255)
  categoryId Int?
  category   Category? @relation(fields: [categoryId], references: [id])
}

model Watchlist {
  id        Int             @id @default(autoincrement())
  name      String          @db.VarChar(255)
  createdAt DateTime        @default(now()) @db.Timestamp(6)
  userId    Int
  User      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     WatchlistItem[]
}

model WatchlistItem {
  id          Int       @id @default(autoincrement())
  addedAt     DateTime  @default(now()) @db.Timestamp(6)
  resourceId  Int
  watchlistId Int
  Resource    Resource  @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  Watchlist   Watchlist @relation(fields: [watchlistId], references: [id], onDelete: Cascade)
}

model Resource {
  id             Int             @id @default(autoincrement())
  name           String          @db.VarChar(255)
  type           String          @db.VarChar(50)
  createdAt      DateTime        @default(now()) @db.Timestamp(6)
  watchlistItems WatchlistItem[]
}

model Auction {
  id        Int      @id @default(autoincrement())
  time      BigInt
  deployer  String
  name      String
  deployGas String
  tokenId   String   @unique
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@index([time])
}

model UserWallet {
  id        Int      @id @default(autoincrement())
  userId    Int
  walletId  Int
  name      String?  @db.VarChar(255)
  addedAt   DateTime @default(now()) @db.Timestamp(6)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Wallet    Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@unique([userId, walletId])
}
