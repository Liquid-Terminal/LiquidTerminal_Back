generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                              Int                           @id @default(autoincrement())
  privyUserId                     String                        @unique
  name                            String?                       @db.VarChar(255)
  email                           String?                       @unique @db.VarChar(255)
  createdAt                       DateTime                      @default(now()) @db.Timestamp(6)
  verified                        Boolean                       @default(false)
  UserWallets                     UserWallet[]
  createdEducationalCategories    EducationalCategory[]         @relation("EducationalCategoryCreator")
  addedEducationalResources       EducationalResource[]         @relation("EducationalResourceCreator")
  assignedEducationalResources    EducationalResourceCategory[] @relation("EducationalResourceAssigner")
  readLists                       ReadList[]
}

model Wallet {
  id          Int         @id @default(autoincrement())
  address     String      @unique @db.VarChar(255)
  name        String?     @db.VarChar(255)
  addedAt     DateTime    @default(now()) @db.Timestamp(6)
  UserWallets UserWallet[]
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique @db.VarChar(100)
  description String?   @db.VarChar(255)
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  updatedAt   DateTime  @updatedAt
  projects    Project[]
}

model Project {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now()) @db.Timestamp(6)
  updatedAt  DateTime  @updatedAt
  title      String    @unique @db.VarChar(255)
  desc       String    @db.VarChar(255)
  logo       String    @db.VarChar(255)
  twitter    String?   @db.VarChar(255)
  discord    String?   @db.VarChar(255)
  telegram   String?   @db.VarChar(255)
  website    String?   @db.VarChar(255)
  categoryId Int?
  category   Category? @relation(fields: [categoryId], references: [id])
}

model UserWallet {
  id        Int      @id @default(autoincrement())
  userId    Int
  walletId  Int
  name      String?  @db.VarChar(255)
  addedAt   DateTime @default(now()) @db.Timestamp(6)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Wallet    Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@unique([userId, walletId])
}

model EducationalCategory {
  id          Int       @id @default(autoincrement())
  name        String    @unique @db.VarChar(100)
  description String?   @db.VarChar(255)
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  createdBy   Int
  creator     User      @relation("EducationalCategoryCreator", fields: [createdBy], references: [id])
  resources   EducationalResourceCategory[]
}

model EducationalResource {
  id          Int       @id @default(autoincrement())
  url         String    @db.VarChar(500)
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  addedBy     Int
  creator     User      @relation("EducationalResourceCreator", fields: [addedBy], references: [id])
  categories  EducationalResourceCategory[]
  readListItems ReadListItem[]
}

model EducationalResourceCategory {
  id         Int                   @id @default(autoincrement())
  resourceId Int
  categoryId Int
  assignedAt DateTime              @default(now()) @db.Timestamp(6)
  assignedBy Int?
  resource   EducationalResource   @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  category   EducationalCategory   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  assigner   User?                 @relation("EducationalResourceAssigner", fields: [assignedBy], references: [id])

  @@unique([resourceId, categoryId])
}

model ReadList {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(255)
  description String?   @db.VarChar(500)
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  updatedAt   DateTime  @updatedAt
  userId      Int
  isPublic    Boolean   @default(false)
  
  creator     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  items       ReadListItem[]
}

model ReadListItem {
  id         Int      @id @default(autoincrement())
  readListId Int
  resourceId Int
  addedAt    DateTime @default(now()) @db.Timestamp(6)
  isRead     Boolean  @default(false)
  notes      String?  @db.Text
  order      Int?
  
  readList   ReadList            @relation(fields: [readListId], references: [id], onDelete: Cascade)
  resource   EducationalResource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  
  @@unique([readListId, resourceId])
}
