generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  MODERATOR
  ADMIN
}

// ==================== PUBLIC GOODS ENUMS ====================

enum ProjectStatus {
  PENDING
  APPROVED
  REJECTED
}

enum DevelopmentStatus {
  IDEA
  DEVELOPMENT
  BETA
  PRODUCTION
}

enum TeamSize {
  SOLO
  SMALL
  LARGE
}

enum ExperienceLevel {
  BEGINNER
  INTERMEDIATE
  EXPERT
}

enum SupportType {
  PROMOTION
  SERVICES
  FUNDING
}

enum BudgetRange {
  RANGE_0_5K
  RANGE_5_15K
  RANGE_15_30K
  RANGE_30_50K
  RANGE_50K_PLUS
}

enum Timeline {
  THREE_MONTHS
  SIX_MONTHS
  TWELVE_MONTHS
}

model User {
  id                              Int                           @id @default(autoincrement())
  privyUserId                     String                        @unique
  name                            String?                       @unique @db.VarChar(255)
  email                           String?                       @unique @db.VarChar(255)
  role                            UserRole                      @default(USER)
  createdAt                       DateTime                      @default(now()) @db.Timestamp(6)
  verified                        Boolean                       @default(false)
  
  // Système de referral
  referredBy                      String?                       @db.VarChar(255)
  referralCount                   Int                           @default(0)
  
  // Relations
  referrals                       User[]                        @relation("UserReferrals")
  referrer                        User?                         @relation("UserReferrals", fields: [referredBy], references: [name])
  
  UserWallets                     UserWallet[]
  createdEducationalCategories    EducationalCategory[]         @relation("EducationalCategoryCreator")
  addedEducationalResources       EducationalResource[]         @relation("EducationalResourceCreator")
  assignedEducationalResources    EducationalResourceCategory[] @relation("EducationalResourceAssigner")
  readLists                       ReadList[]
  walletLists                     WalletList[]
  submittedPublicGoods            PublicGood[]                  @relation("SubmittedGoods")
  reviewedPublicGoods             PublicGood[]                  @relation("ReviewedGoods")
}

model Wallet {
  id          Int         @id @default(autoincrement())
  address     String      @unique @db.VarChar(255)
  addedAt     DateTime    @default(now()) @db.Timestamp(6)
  UserWallets UserWallet[]
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique @db.VarChar(100)
  description String?   @db.VarChar(255)
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  updatedAt   DateTime  @updatedAt
  projects    ProjectCategory[]
}

model Project {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now()) @db.Timestamp(6)
  updatedAt  DateTime  @updatedAt
  title      String    @unique @db.VarChar(255)
  desc       String    @db.VarChar(255)
  logo       String    @db.VarChar(255)
  banner     String?   @db.VarChar(255)
  token      String?   @db.VarChar(255)
  twitter    String?   @db.VarChar(255)
  discord    String?   @db.VarChar(255)
  telegram   String?   @db.VarChar(255)
  website    String?   @db.VarChar(255)
  categories ProjectCategory[]
}

model ProjectCategory {
  id         Int       @id @default(autoincrement())
  projectId  Int
  categoryId Int
  assignedAt DateTime  @default(now()) @db.Timestamp(6)
  
  project    Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  category   Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([projectId, categoryId])
}

model UserWallet {
  id        Int      @id @default(autoincrement())
  userId    Int
  walletId  Int
  name      String?  @db.VarChar(255)
  addedAt   DateTime @default(now()) @db.Timestamp(6)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Wallet    Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)
  listEntries WalletListItem[]

  @@unique([userId, walletId])
}

model WalletList {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(255)
  description String?   @db.VarChar(500)
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  updatedAt   DateTime  @updatedAt
  userId      Int
  isPublic    Boolean   @default(false)
  
  creator     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  items       WalletListItem[]
}

model WalletListItem {
  id         Int      @id @default(autoincrement())
  walletListId Int
  userWalletId Int
  addedAt    DateTime @default(now()) @db.Timestamp(6)
  notes      String?  @db.Text
  order      Int?
  
  walletList WalletList @relation(fields: [walletListId], references: [id], onDelete: Cascade)
  userWallet UserWallet @relation(fields: [userWalletId], references: [id], onDelete: Cascade)
  
  @@unique([walletListId, userWalletId])
}

model EducationalCategory {
  id          Int       @id @default(autoincrement())
  name        String    @unique @db.VarChar(100)
  description String?   @db.VarChar(255)
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  createdBy   Int
  creator     User      @relation("EducationalCategoryCreator", fields: [createdBy], references: [id])
  resources   EducationalResourceCategory[]
}

model EducationalResource {
  id          Int       @id @default(autoincrement())
  url         String    @db.VarChar(500)
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  addedBy     Int
  linkPreviewId String?
  creator     User      @relation("EducationalResourceCreator", fields: [addedBy], references: [id])
  linkPreview LinkPreview? @relation(fields: [linkPreviewId], references: [id])
  categories  EducationalResourceCategory[]
  readListItems ReadListItem[]
}

model EducationalResourceCategory {
  id         Int                   @id @default(autoincrement())
  resourceId Int
  categoryId Int
  assignedAt DateTime              @default(now()) @db.Timestamp(6)
  assignedBy Int?
  resource   EducationalResource   @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  category   EducationalCategory   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  assigner   User?                 @relation("EducationalResourceAssigner", fields: [assignedBy], references: [id])

  @@unique([resourceId, categoryId])
}

model ReadList {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(255)
  description String?   @db.VarChar(500)
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  updatedAt   DateTime  @updatedAt
  userId      Int
  isPublic    Boolean   @default(false)
  
  creator     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  items       ReadListItem[]
}

model ReadListItem {
  id         Int      @id @default(autoincrement())
  readListId Int
  resourceId Int
  addedAt    DateTime @default(now()) @db.Timestamp(6)
  isRead     Boolean  @default(false)
  notes      String?  @db.Text
  order      Int?
  
  readList   ReadList            @relation(fields: [readListId], references: [id], onDelete: Cascade)
  resource   EducationalResource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  
  @@unique([readListId, resourceId])
}

model LinkPreview {
  id          String   @id @default(cuid())
  url         String   @unique @db.VarChar(500)
  title       String?  @db.VarChar(255)
  description String?  @db.VarChar(500)
  image       String?  @db.VarChar(500)
  siteName    String?  @db.VarChar(100)
  favicon     String?  @db.VarChar(500)
  createdAt   DateTime @default(now()) @db.Timestamp(6)
  updatedAt   DateTime @updatedAt
  
  // Relation avec EducationalResource
  resources   EducationalResource[]
  
  @@map("link_previews")
}

// ==================== PUBLIC GOODS ====================

model PublicGood {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Section 1: Le projet
  name            String
  description     String   @db.Text
  githubUrl       String
  demoUrl         String?
  websiteUrl      String?
  category        String
  discordContact  String?
  telegramContact String?

  // Visuels
  logo        String?
  banner      String?
  screenshots String[] // Array de URLs

  // Section 2: Impact HyperLiquid
  problemSolved      String   @db.Text
  targetUsers        String[] // ["developers", "traders", etc]
  hlIntegration      String   @db.Text
  developmentStatus  DevelopmentStatus

  // Section 3: Équipe & Technique
  leadDeveloperName    String
  leadDeveloperContact String
  teamSize             TeamSize
  experienceLevel      ExperienceLevel
  technologies         String[]

  // Section 4: Soutien demandé (optionnel)
  supportTypes SupportType[]
  budgetRange  BudgetRange?
  timeline     Timeline?

  // Métadonnées
  status      ProjectStatus @default(PENDING)
  submittedAt DateTime      @default(now())
  reviewedAt  DateTime?
  reviewedBy  User?         @relation("ReviewedGoods", fields: [reviewerId], references: [id])
  reviewerId  Int?
  reviewNotes String?       @db.Text

  // User qui a soumis
  submittedBy User @relation("SubmittedGoods", fields: [submitterId], references: [id], onDelete: Cascade)
  submitterId Int

  @@index([status])
  @@index([category])
  @@index([submitterId])
  @@index([developmentStatus])
  @@map("public_goods")
}
